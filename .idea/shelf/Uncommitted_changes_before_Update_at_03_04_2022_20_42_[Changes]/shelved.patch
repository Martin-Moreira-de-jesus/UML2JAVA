Index: src/main/java/fr/umlads/uml2java/db/Linker.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fr.umlads.uml2java.db;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\nimport java.util.Locale;\r\n\r\npublic class Linker {\r\n    public void link() {\r\n        JSONArray links = JSONDB.DATABASE.getAllLinks();\r\n\r\n        for (int i = 0; i < links.length(); ++i) {\r\n            JSONObject link = (JSONObject) links.get(i);\r\n            JSONObject source = null;\r\n            JSONObject target = null;\r\n\r\n            if (!link.getString(\"_type\").matches(\"UMLAssociation|UMLAssociationClassLink\")) {\r\n                source = JSONDB.DATABASE.getById(link.getJSONObject(\"source\").getString(\"$ref\"));\r\n                target = JSONDB.DATABASE.getById(link.getJSONObject(\"target\").getString(\"$ref\"));\r\n            }\r\n\r\n            String linkType = link.getString(\"_type\");\r\n\r\n            switch (linkType) {\r\n                case \"UMLGeneralization\" -> {\r\n                    assert source != null;\r\n                    generateGeneralizationRelationship(source, target);\r\n                }\r\n                case \"UMLDependency\" -> generateDependencyRelationship(source, target, link);\r\n                case \"UMLInterfaceRealization\" -> {\r\n                    assert source != null;\r\n                    generateInterfaceRealRelationship(source, target);\r\n                }\r\n                case \"UMLAssociation\" -> generateAssociationRelationship(link);\r\n            }\r\n\r\n            JSONDB.DATABASE.remove(link);\r\n        }\r\n    }\r\n\r\n    private JSONObject generateAttributeFromEnd(JSONObject end) {\r\n        JSONObject attribute = new JSONObject();\r\n\r\n        if (end.has(\"visibility\")) {\r\n            attribute.put(\"visibility\", end.getString(\"visibility\"));\r\n        } else {\r\n            attribute.put(\"visibility\", \"private\");\r\n        }\r\n\r\n        if (end.has(\"multiplicity\")) {\r\n            attribute.put(\"multiplicity\", end.getString(\"multiplicity\"));\r\n        } else {\r\n            attribute.put(\"multiplicity\", \"1\");\r\n        }\r\n\r\n        if (end.has(\"name\")) {\r\n            attribute.put(\"name\", end.getString(\"name\"));\r\n        } else {\r\n            String name = JSONDB.DATABASE.getById(end.getJSONObject(\"reference\").\r\n                    getString(\"$ref\")).getString(\"name\");\r\n            name = name.substring(0, 1).toLowerCase(Locale.ROOT) + name.substring(1);\r\n            attribute.put(\"name\", name);\r\n        }\r\n        String type = JSONDB.DATABASE.getById(end.getJSONObject(\"reference\").\r\n                getString(\"$ref\")).getString(\"name\");\r\n\r\n        String multiplicity = end.has(\"multiplicity\") ? end.getString(\"multiplicity\") : \"\";\r\n\r\n        if (multiplicity.contains(\"*\") || multiplicity.contains(\"n\") || multiplicity.matches(\"[2-9]\")) {\r\n            type += \"[]\";\r\n        }\r\n\r\n        attribute.put(\"type\", type);\r\n\r\n        return attribute;\r\n    }\r\n\r\n    private void addAttribute(JSONObject end1, JSONObject end2) {\r\n        String end1ID = end1.getJSONObject(\"reference\").getString(\"$ref\");\r\n        String end2ID = end2.getJSONObject(\"reference\").getString(\"$ref\");\r\n\r\n        // boolean end1Navigable = end1.has(\"name\") && !end1.getString(\"name\").equals(\"\") && (!end1.has(\"navigable\") || !end1.getBoolean(\"navigable\"));\r\n        // boolean end2Navigable = end2.has(\"name\") && !end2.getString(\"name\").equals(\"\") && (!end2.has(\"navigable\") || !end2.getBoolean(\"navigable\"));\r\n\r\n        boolean end1Navigable =  !end1.has(\"navigable\") || !end1.getString(\"navigable\").equals(\"false\");\r\n        boolean end2Navigable = !end2.has(\"navigable\") || !end2.getString(\"navigable\").equals(\"false\");\r\n\r\n        JSONObject source = JSONDB.DATABASE.getById(end1ID);\r\n        JSONObject target = JSONDB.DATABASE.getById(end2ID);\r\n\r\n        if (!target.has(\"attributes\")) {\r\n            target.put(\"attributes\", new JSONArray());\r\n        }\r\n\r\n        if (!source.has(\"attributes\")) {\r\n            source.put(\"attributes\", new JSONArray());\r\n        }\r\n\r\n        JSONObject targetAttribute = null;\r\n        JSONObject sourceAttribute = null;\r\n\r\n        if (source.getString(\"_id\").equals(end1ID)) {\r\n            if (end1Navigable) {\r\n                targetAttribute = generateAttributeFromEnd(end1);\r\n            }\r\n            if (end2Navigable) {\r\n                sourceAttribute = generateAttributeFromEnd(end2);\r\n            }\r\n        } else {\r\n            if (end2Navigable) {\r\n                sourceAttribute = generateAttributeFromEnd(end2);\r\n            }\r\n            if (end1Navigable) {\r\n                targetAttribute = generateAttributeFromEnd(end1);\r\n            }\r\n        }\r\n\r\n        if (targetAttribute != null) target.getJSONArray(\"attributes\").put(targetAttribute);\r\n        if (sourceAttribute != null) source.getJSONArray(\"attributes\").put(sourceAttribute);\r\n    }\r\n\r\n    private void generateAssociationRelationship(JSONObject link) {\r\n        JSONObject classLink = JSONDB.DATABASE.getObjectWith(\"_type\", \"UMLAssociationClassLink\");\r\n        if (classLink != null\r\n                && classLink.getJSONObject(\"associationSide\").getString(\"$ref\").equals(link.getString(\"_id\"))) {\r\n            addAttributeToAssociativeClass(link, classLink);\r\n        } else {\r\n            JSONObject end1 = link.getJSONObject(\"end1\");\r\n            JSONObject end2 = link.getJSONObject(\"end2\");\r\n            addAttribute(end1, end2);\r\n        }\r\n    }\r\n\r\n    private void addAttributeToAssociativeClass(JSONObject link, JSONObject classLink) {\r\n        JSONObject UMLClass = JSONDB.DATABASE.getObjectWith(\"_id\", classLink.getJSONObject(\"classSide\").getString(\"$ref\"));\r\n        JSONObject end1 = link.getJSONObject(\"end1\");\r\n        JSONObject end2 = link.getJSONObject(\"end2\");\r\n\r\n        JSONObject attribute1 = generateAttributeFromEnd(end1);\r\n        JSONObject attribute2 = generateAttributeFromEnd(end2);\r\n\r\n        if (!UMLClass.has(\"attributes\")) {\r\n            UMLClass.put(\"attributes\", new JSONArray());\r\n        }\r\n\r\n        UMLClass.getJSONArray(\"attributes\").put(attribute1);\r\n        UMLClass.getJSONArray(\"attributes\").put(attribute2);\r\n    }\r\n\r\n    private void generateGeneralizationRelationship(JSONObject source, JSONObject target) {\r\n        JSONObject motherClass = new JSONObject();\r\n\r\n        motherClass.put(\"name\", target.getString(\"name\"));\r\n        motherClass.put(\"$ref\", target.getString(\"_id\"));\r\n\r\n        source.put(\"extends\", motherClass);\r\n\r\n        if (!target.has(\"operations\")) return; // exiting method if there's no abstract operations to add\r\n\r\n        if (!source.has(\"operations\")) {\r\n            source.put(\"operations\", new JSONArray());\r\n        }\r\n\r\n        JSONArray targetOperations = target.getJSONArray(\"operations\"); // abstract operations of the mother\r\n        for (int i = 0; i < targetOperations.length(); ++i) {\r\n            if (targetOperations.getJSONObject(i).has(\"isAbstract\")) {\r\n                source.getJSONArray(\"operations\").put(targetOperations.getJSONObject(i));\r\n            }\r\n        }\r\n    }\r\n\r\n    private void generateInterfaceRealRelationship(JSONObject source, JSONObject target) {\r\n        JSONObject interfaceReal = new JSONObject();\r\n        if (!source.has(\"interfacesRealized\")) {\r\n            source.put(\"interfacesRealized\", new JSONArray());\r\n        }\r\n\r\n        interfaceReal.put(\"name\", target.getString(\"name\"));\r\n        interfaceReal.put(\"$ref\", target.getString(\"_id\"));\r\n\r\n        source.getJSONArray(\"interfacesRealized\").put(interfaceReal);\r\n\r\n        if (!source.has(\"operations\")) {\r\n            source.put(\"operations\", new JSONArray());\r\n        }\r\n        if (target.has(\"operations\")) {\r\n            JSONArray operations = new JSONArray(target.getJSONArray(\"operations\").toString());\r\n\r\n            for (int i = 0; i < operations.length(); i++) {\r\n                operations.getJSONObject(i).put(\"keyword\", \"Override\");\r\n            }\r\n\r\n            source.getJSONArray(\"operations\").putAll(operations);\r\n        }\r\n    }\r\n\r\n    private void generateDependencyRelationship(JSONObject source, JSONObject target, JSONObject dependency) {\r\n        JSONObject operation = new JSONObject(); // operation built with the target object to put in the source object\r\n\r\n        if (dependency.has(\"name\")) {\r\n            operation.put(\"name\", dependency.getString(\"name\"));\r\n        } else {\r\n            String operationName = target.getString(\"name\");\r\n            operationName = \"use\" + operationName.substring(0, 1).toUpperCase() + operationName.substring(1);\r\n            operation.put(\"name\", operationName);\r\n        }\r\n\r\n        JSONObject parameter = new JSONObject();\r\n\r\n        parameter.put(\"type\", target.getString(\"name\"));\r\n        String paramName = target.getString(\"name\");\r\n        paramName = paramName.substring(0, 1).toLowerCase() + paramName.substring(1);\r\n        parameter.put(\"name\", paramName);\r\n\r\n        operation.put(\"parameters\", new JSONArray());\r\n        operation.getJSONArray(\"parameters\").put(parameter);\r\n\r\n        if (!source.has(\"operations\")) {\r\n            source.put(\"operations\", new JSONArray());\r\n        }\r\n\r\n        source.getJSONArray(\"operations\").put(operation);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/fr/umlads/uml2java/db/Linker.java b/src/main/java/fr/umlads/uml2java/db/Linker.java
--- a/src/main/java/fr/umlads/uml2java/db/Linker.java	(revision 5e32a0b84c1ae71064d31fdd62a2a4a5e019298e)
+++ b/src/main/java/fr/umlads/uml2java/db/Linker.java	(date 1648812256609)
@@ -7,7 +7,7 @@
 
 public class Linker {
     public void link() {
-        JSONArray links = JSONDB.DATABASE.getAllLinks();
+        JSONArray links = JSONDB.getInstance().getAllLinks();
 
         for (int i = 0; i < links.length(); ++i) {
             JSONObject link = (JSONObject) links.get(i);
@@ -15,8 +15,8 @@
             JSONObject target = null;
 
             if (!link.getString("_type").matches("UMLAssociation|UMLAssociationClassLink")) {
-                source = JSONDB.DATABASE.getById(link.getJSONObject("source").getString("$ref"));
-                target = JSONDB.DATABASE.getById(link.getJSONObject("target").getString("$ref"));
+                source = JSONDB.getInstance().getById(link.getJSONObject("source").getString("$ref"));
+                target = JSONDB.getInstance().getById(link.getJSONObject("target").getString("$ref"));
             }
 
             String linkType = link.getString("_type");
@@ -34,7 +34,7 @@
                 case "UMLAssociation" -> generateAssociationRelationship(link);
             }
 
-            JSONDB.DATABASE.remove(link);
+            JSONDB.getInstance().remove(link);
         }
     }
 
@@ -56,12 +56,12 @@
         if (end.has("name")) {
             attribute.put("name", end.getString("name"));
         } else {
-            String name = JSONDB.DATABASE.getById(end.getJSONObject("reference").
+            String name = JSONDB.getInstance().getById(end.getJSONObject("reference").
                     getString("$ref")).getString("name");
             name = name.substring(0, 1).toLowerCase(Locale.ROOT) + name.substring(1);
             attribute.put("name", name);
         }
-        String type = JSONDB.DATABASE.getById(end.getJSONObject("reference").
+        String type = JSONDB.getInstance().getById(end.getJSONObject("reference").
                 getString("$ref")).getString("name");
 
         String multiplicity = end.has("multiplicity") ? end.getString("multiplicity") : "";
@@ -85,8 +85,8 @@
         boolean end1Navigable =  !end1.has("navigable") || !end1.getString("navigable").equals("false");
         boolean end2Navigable = !end2.has("navigable") || !end2.getString("navigable").equals("false");
 
-        JSONObject source = JSONDB.DATABASE.getById(end1ID);
-        JSONObject target = JSONDB.DATABASE.getById(end2ID);
+        JSONObject source = JSONDB.getInstance().getById(end1ID);
+        JSONObject target = JSONDB.getInstance().getById(end2ID);
 
         if (!target.has("attributes")) {
             target.put("attributes", new JSONArray());
@@ -120,7 +120,7 @@
     }
 
     private void generateAssociationRelationship(JSONObject link) {
-        JSONObject classLink = JSONDB.DATABASE.getObjectWith("_type", "UMLAssociationClassLink");
+        JSONObject classLink = JSONDB.getObjectWith("_type", "UMLAssociationClassLink");
         if (classLink != null
                 && classLink.getJSONObject("associationSide").getString("$ref").equals(link.getString("_id"))) {
             addAttributeToAssociativeClass(link, classLink);
@@ -132,7 +132,7 @@
     }
 
     private void addAttributeToAssociativeClass(JSONObject link, JSONObject classLink) {
-        JSONObject UMLClass = JSONDB.DATABASE.getObjectWith("_id", classLink.getJSONObject("classSide").getString("$ref"));
+        JSONObject UMLClass = JSONDB.getObjectWith("_id", classLink.getJSONObject("classSide").getString("$ref"));
         JSONObject end1 = link.getJSONObject("end1");
         JSONObject end2 = link.getJSONObject("end2");
 
Index: src/main/java/fr/umlads/uml2java/db/JSONDB.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fr.umlads.uml2java.db;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONObject;\r\n\r\npublic class JSONDB {\r\n    private String name;\r\n    public JSONArray db = new JSONArray();\r\n    public static JSONDB DATABASE;\r\n\r\n    public static void init(JSONObject jsonObject) {\r\n        DATABASE = new JSONDB(jsonObject);\r\n    }\r\n\r\n    private JSONArray getAllClasses(JSONArray classes) {\r\n        JSONArray umlClasses = new JSONArray(); // return variable with all the UMLClasses\r\n\r\n        for (int i = 0; i < classes.length(); ++i) {\r\n            JSONObject umlObject = classes.getJSONObject(i); // either a class or a package\r\n            if (umlObject.getString(\"_type\").matches(\"UMLClass|UMLPackage|UMLInterface\")) {\r\n                // if it's a package, we add all the classes to the list of classes\r\n                if (umlObject.getString(\"_type\").equals(\"UMLPackage\")) {\r\n                    JSONArray packageClasses = umlObject.getJSONArray(\"ownedElements\");\r\n                    // add package name to all of them\r\n                    for (int k = 0; k < packageClasses.length(); ++k) {\r\n                        packageClasses.getJSONObject(k).put(\"_package\", umlObject.getString(\"name\"));\r\n                    }\r\n                    umlClasses.putAll(umlObject.getJSONArray(\"ownedElements\"));\r\n                } else {\r\n                    umlObject.put(\"_package\", \"null\");\r\n                    umlClasses.put(umlObject);\r\n                }\r\n            }\r\n        }\r\n        return umlClasses;\r\n    }\r\n\r\n    public JSONObject getObjectWith(String key, String value) {\r\n        for (Object object : this.db) {\r\n            JSONObject jsonObject = (JSONObject) object;\r\n            if (jsonObject.has(key) && jsonObject.getString(key).equals(value)) {\r\n                return jsonObject;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private JSONDB(JSONObject jsonObject) {\r\n        JSONArray classes = new JSONArray();\r\n\r\n        JSONArray models = jsonObject.getJSONArray(\"ownedElements\");\r\n\r\n        for (int i = 0; i < models.length(); i++) {\r\n            classes = this.getAllClasses(models.getJSONObject(i).getJSONArray(\"ownedElements\"));\r\n        }\r\n\r\n        // Separates associations from classes\r\n        for (int i = 0; i < classes.length(); ++i) {\r\n            JSONObject umlClass = classes.getJSONObject(i);\r\n            if (umlClass.has(\"ownedElements\")) {\r\n                JSONArray associations = umlClass.getJSONArray(\"ownedElements\");\r\n                for (Object association : associations) {\r\n                    classes.put((JSONObject) association);\r\n                }\r\n            }\r\n            umlClass.remove(\"ownedElements\");\r\n        }\r\n        this.db.putAll(classes);\r\n    }\r\n\r\n    public JSONArray getDatabase() {\r\n        return db;\r\n    }\r\n\r\n    public JSONArray getAllLinks() {\r\n        JSONArray links = new JSONArray();\r\n        for (Object dbObject : db) {\r\n            if (!((JSONObject) dbObject).getString(\"_type\").matches(\"UMLClass|UMLInterface\")) {\r\n                links.put((JSONObject) dbObject);\r\n            }\r\n        }\r\n        return links;\r\n    }\r\n\r\n    public JSONObject getById(String id) {\r\n        for (Object object : db) {\r\n            if (((JSONObject) object).getString(\"_id\").equals(id)) {\r\n                return (JSONObject) object;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public JSONArray getByType(String type) {\r\n        JSONArray jsonArray = new JSONArray();\r\n        for (Object object : db) {\r\n            if (((JSONObject) object).getString(\"_id\").equals(type)) {\r\n                jsonArray.put((JSONObject) object);\r\n            }\r\n        }\r\n        return jsonArray;\r\n    }\r\n\r\n    public void remove(JSONObject object) {\r\n        for (int i = 0; i < this.db.length(); i++) {\r\n            if (this.db.getJSONObject(i) == object) {\r\n                this.db.remove(i);\r\n            }\r\n        }\r\n    }\r\n\r\n    public JSONArray fetchClasses() {\r\n        JSONArray result = new JSONArray();\r\n\r\n        for (int i = 0; i < this.db.length(); ++i) {\r\n            if (this.db.getJSONObject(i).getString(\"_type\").matches(\"UMLClass|UMLInterface\")) {\r\n                result.put(this.db.getJSONObject(i));\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/fr/umlads/uml2java/db/JSONDB.java b/src/main/java/fr/umlads/uml2java/db/JSONDB.java
--- a/src/main/java/fr/umlads/uml2java/db/JSONDB.java	(revision 5e32a0b84c1ae71064d31fdd62a2a4a5e019298e)
+++ b/src/main/java/fr/umlads/uml2java/db/JSONDB.java	(date 1648812256626)
@@ -5,8 +5,8 @@
 
 public class JSONDB {
     private String name;
-    public JSONArray db = new JSONArray();
-    public static JSONDB DATABASE;
+    private JSONArray db = new JSONArray();
+    private static JSONDB DATABASE;
 
     public static void init(JSONObject jsonObject) {
         DATABASE = new JSONDB(jsonObject);
@@ -35,8 +35,8 @@
         return umlClasses;
     }
 
-    public JSONObject getObjectWith(String key, String value) {
-        for (Object object : this.db) {
+    public static JSONObject getObjectWith(String key, String value) {
+        for (Object object : DATABASE.db) {
             JSONObject jsonObject = (JSONObject) object;
             if (jsonObject.has(key) && jsonObject.getString(key).equals(value)) {
                 return jsonObject;
@@ -68,10 +68,6 @@
         this.db.putAll(classes);
     }
 
-    public JSONArray getDatabase() {
-        return db;
-    }
-
     public JSONArray getAllLinks() {
         JSONArray links = new JSONArray();
         for (Object dbObject : db) {
@@ -120,4 +116,8 @@
 
         return result;
     }
+
+    public static JSONDB getInstance() {
+        return DATABASE;
+    }
 }
Index: src/main/java/fr/umlads/uml2java/db/Translator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fr.umlads.uml2java.db;\r\n\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.io.PrintWriter;\r\nimport java.util.Scanner;\r\n\r\npublic class Translator {\r\n    private final boolean addGettersAndSetters;\r\n    private final String outputDirPath;\r\n    private final String projectName;\r\n\r\n    public Translator(String projectName, String outputDirPath, boolean addGettersAndSetters) {\r\n        this.projectName = projectName;\r\n        this.addGettersAndSetters = addGettersAndSetters;\r\n        this.outputDirPath = outputDirPath;\r\n    }\r\n\r\n    public void translate() throws IOException {\r\n        JSONArray classes = JSONDB.DATABASE.fetchClasses();\r\n\r\n        preProcess(classes);\r\n\r\n        if (this.addGettersAndSetters) {\r\n            addGettersAndSetters(classes);\r\n        }\r\n\r\n        for (int i = 0; i < classes.length(); i++) {\r\n            JSONObject currentClass = classes.getJSONObject(i);\r\n\r\n            File createdFile = makeDirsAndFile(currentClass);\r\n\r\n            PrintWriter writer = new PrintWriter(createdFile);\r\n            writer.println(UML2Java(currentClass));\r\n            writer.close();\r\n        }\r\n    }\r\n\r\n    private void addGettersAndSetters(JSONArray classes) {\r\n        for (Object o : classes) {\r\n            JSONObject umlClass = (JSONObject) o;\r\n            if (!umlClass.has(\"attributes\")) continue;\r\n            JSONArray attributes = umlClass.getJSONArray(\"attributes\");\r\n            for (Object attribute : attributes) {\r\n                JSONObject classAttribute = (JSONObject) attribute;\r\n\r\n                if (classAttribute.optString(\"isStatic\").equals(\"true\")\r\n                        || classAttribute.optString(\"visibility\").equals(\"public\")) continue;\r\n\r\n                if (!umlClass.has(\"operations\")) {\r\n                    umlClass.put(\"operations\", new JSONArray());\r\n                }\r\n\r\n                // getter operation\r\n                JSONObject getter = new JSONObject();\r\n                getter.put(\"name\", \"get\" + classAttribute.getString(\"name\").substring(0, 1).toUpperCase() + classAttribute.getString(\"name\").substring(1));\r\n                getter.put(\"visibility\", \"public\");\r\n\r\n                // parameter that represents the return value\r\n                JSONObject returnParameter = new JSONObject();\r\n                returnParameter.put(\"direction\", \"return\");\r\n                returnParameter.put(\"type\", classAttribute.getString(\"type\"));\r\n\r\n                getter.put(\"parameters\", new JSONArray());\r\n                getter.getJSONArray(\"parameters\").put(returnParameter);\r\n\r\n                getter.put(\"content\", \"return \" + classAttribute.getString(\"name\") + \";\");\r\n\r\n                umlClass.getJSONArray(\"operations\").put(getter);\r\n\r\n                if (classAttribute.optString(\"isReadOnly\").equals(\"true\")) continue;\r\n\r\n                JSONObject setter = new JSONObject();\r\n\r\n                setter.put(\"name\", \"set\" + classAttribute.getString(\"name\").substring(0, 1).toUpperCase()  + classAttribute.getString(\"name\").substring(1));\r\n                setter.put(\"visibility\", \"public\");\r\n                setter.put(\"returnType\", \"void\");\r\n\r\n                returnParameter = new JSONObject();\r\n                returnParameter.put(\"direction\", \"return\");\r\n                returnParameter.put(\"type\", \"void\");\r\n\r\n                JSONObject setterParameter = new JSONObject();\r\n                setterParameter.put(\"name\", classAttribute.getString(\"name\"));\r\n                setterParameter.put(\"type\", classAttribute.getString(\"type\"));\r\n\r\n                setter.put(\"parameters\", new JSONArray());\r\n                setter.getJSONArray(\"parameters\").put(returnParameter);\r\n                setter.getJSONArray(\"parameters\").put(setterParameter);\r\n\r\n                setter.put(\"content\", \"this.\" + classAttribute.getString(\"name\") + \" = \" + classAttribute.getString(\"name\") + \";\");\r\n\r\n                umlClass.getJSONArray(\"operations\").put(setter);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void preProcess(JSONArray classes) {\r\n        preProcessTemplateParameters(classes);\r\n\r\n        //preProcessAttributes(classes); // to chose other kinds of collection types\r\n    }\r\n\r\n    private void preProcessAttributes(JSONArray classes) {\r\n        Scanner scanner = new Scanner(System.in);\r\n\r\n        for (int i = 0; i < classes.length(); i++) {\r\n            if (!classes.getJSONObject(i).has(\"attributes\")) continue;\r\n            JSONArray attributes = classes.getJSONObject(i).getJSONArray(\"attributes\");\r\n\r\n            for (int j = 0; j < attributes.length(); j++) {\r\n                JSONObject attribute = attributes.getJSONObject(j);\r\n\r\n                if (!attribute.getString(\"type\").contains(\"[]\")) continue;\r\n\r\n                System.out.print(\"The attribute <\" + attribute.getString(\"name\") + \"> from the class <\"\r\n                        + classes.getJSONObject(i).getString(\"name\") + \"> default type was put to <\"\r\n                        + attribute.getString(\"type\") + \">. Type new type (leave empty to keep default type):\");\r\n\r\n                String type = scanner.nextLine();\r\n\r\n                if (type.equals(\"\")) {\r\n                    continue;\r\n                }\r\n\r\n                attribute.put(\"type\", type);\r\n            }\r\n        }\r\n    }\r\n\r\n    private void preProcessTemplateParameters(JSONArray classes) {\r\n        classes.forEach(item -> {\r\n            JSONObject umlClass = (JSONObject) item;\r\n            if (umlClass.has(\"templateParameters\")) {\r\n                String className = umlClass.getString(\"name\") + \"<\";\r\n\r\n                JSONArray templateParameters = umlClass.getJSONArray(\"templateParameters\");\r\n                for (int i = 0; i < templateParameters.length(); i++) {\r\n                    className += templateParameters.getJSONObject(i).getString(\"name\") + \", \";\r\n                }\r\n\r\n                className = className.substring(0, className.length() - 2);\r\n\r\n                className += \">\";\r\n\r\n                umlClass.remove(\"name\");\r\n                umlClass.put(\"name\", className);\r\n            }\r\n        });\r\n    }\r\n\r\n    public File makeDirsAndFile(JSONObject currentClass) throws IOException {\r\n        String filePath = (outputDirPath.equals(\"\") ? System.getProperty(\"user.dir\") : outputDirPath) + \"/\"\r\n                + this.projectName + \"/src/\";\r\n        if (currentClass.getString(\"_package\").equals(\"null\")) {\r\n            filePath += \"com/company/\";\r\n        } else {\r\n            String[] dirs = currentClass.getString(\"_package\").split(\"\\\\.\");\r\n            for (String dir : dirs) {\r\n                filePath += dir + \"/\";\r\n            }\r\n        }\r\n\r\n        File directory = new File(filePath);\r\n\r\n        if (!directory.exists()) {\r\n            directory.mkdirs();\r\n        }\r\n\r\n        filePath += currentClass.getString(\"name\");\r\n\r\n        if (filePath.contains(\"<\"))\r\n            filePath = filePath.substring(0, filePath.indexOf(\"<\"));\r\n\r\n        filePath += \".java\";\r\n\r\n        File classFile = new File(filePath);\r\n\r\n        if (classFile.createNewFile()) {\r\n            //System.out.println(\"File created: \" + classFile.getName());\r\n        } else {\r\n            //System.out.println(\"Couldn't create file: \" + classFile.getName());\r\n        }\r\n\r\n        return classFile;\r\n    }\r\n\r\n    private String translateAttributes(JSONArray attributes) {\r\n        String result = \"\";\r\n        for (int i = 0; i < attributes.length(); i++) {\r\n            JSONObject attribute = attributes.getJSONObject(i);\r\n\r\n            result += \"\\t\" + (attribute.has(\"visibility\") ? attribute.getString(\"visibility\") : \"public\") + \" \"\r\n                    + (attribute.has(\"isStatic\") && (Boolean) attribute.get(\"isStatic\") ? \"static \" : \"\")\r\n                    + attribute.getString(\"type\") + \" \"\r\n                    + attribute.getString(\"name\") + \";\\n\";\r\n        }\r\n        result += '\\n';\r\n        return result;\r\n    }\r\n\r\n    private String translateParameters(JSONArray parameters) {\r\n        if (parameters.length() == 0) return \"\";\r\n        String result = \"\";\r\n        for (int j = 0; j < parameters.length(); j++) {\r\n            JSONObject parameter = parameters.getJSONObject(j);\r\n\r\n            try {\r\n                result += parameter.getString(\"type\");\r\n            } catch (JSONException e) {\r\n                result += JSONDB.DATABASE.getById(parameter.getJSONObject(\"type\").getString(\"$ref\")).getString(\"name\");\r\n            }\r\n            result += \" \" + parameter.getString(\"name\") + \", \";\r\n        }\r\n\r\n        result = result.substring(0, result.length() - 2);\r\n\r\n        return result;\r\n    }\r\n\r\n    private String translateOperations(JSONArray operations, String type, String className) {\r\n        String result = \"\";\r\n\r\n        for (int i = 0; i < operations.length(); i++) {\r\n            JSONObject operation = operations.getJSONObject(i);\r\n            String operationType = getOperationType(operation);\r\n\r\n            if (operation.has(\"keyword\")) {\r\n                result += \"\\t@\" + operation.getString(\"keyword\") + \"\\n\";\r\n            }\r\n\r\n            result += \"\\t\" + (operation.has(\"visibility\") ? operation.getString(\"visibility\") : \"public\") + \" \"\r\n                    + (operation.has(\"isAbstract\") && (Boolean) operation.get(\"isAbstract\") ? \"abstract \" : \"\")\r\n                    + (operation.getString(\"name\").equals(operationType) && operationType.equals(className) ? \"\" : operationType + \" \")\r\n                    + operation.getString(\"name\") + \"(\";\r\n\r\n            if (operation.has(\"parameters\")) {\r\n                result += translateParameters(operation.getJSONArray(\"parameters\"));\r\n            }\r\n\r\n            result += \")\";\r\n            if (type.equals(\"class\")) {\r\n                result += \" {\\n\\t\\t\";\r\n\r\n                if (operation.has(\"content\")) {\r\n                    result += operation.getString(\"content\");\r\n                } else {\r\n                    result += \"//TODO\";\r\n                }\r\n\r\n                result += \"\\n\\t}\";\r\n            } else {\r\n                result += \";\";\r\n            }\r\n            result += \"\\n\\n\";\r\n        }\r\n        return result;\r\n    }\r\n\r\n    private String UML2Java(JSONObject umlClass) {\r\n        String type = \"class\";\r\n        if (umlClass.getString(\"_type\").equals(\"UMLInterface\")) {\r\n            type = \"interface\";\r\n        }\r\n        String result = \"\";\r\n        result += \"public \" + (umlClass.has(\"isAbstract\") && (Boolean) umlClass.get(\"isAbstract\")\r\n                ? \"abstract \" : \"\") + type + \" \" + umlClass.getString(\"name\") + \" \";\r\n\r\n        if (umlClass.has(\"extends\")) {\r\n            result += \"extends \" + umlClass.getJSONObject(\"extends\").getString(\"name\") + \" \";\r\n        }\r\n\r\n        if (umlClass.has(\"interfacesRealized\")) {\r\n            result += \"implements \";\r\n            for (Object o : umlClass.getJSONArray(\"interfacesRealized\")) {\r\n                result += ((JSONObject) o).getString(\"name\") + \", \";\r\n            }\r\n            result = result.substring(0, result.length() - 2);\r\n\r\n            result += \" \";\r\n        }\r\n\r\n        result += \"{\\n\";\r\n\r\n        if (umlClass.has(\"attributes\")) {\r\n            result += translateAttributes(umlClass.getJSONArray(\"attributes\"));\r\n        }\r\n\r\n        if (umlClass.has(\"operations\")) {\r\n            result += translateOperations(umlClass.getJSONArray(\"operations\"), type, umlClass.getString(\"name\"));\r\n        }\r\n\r\n        return result + \"}\";\r\n    }\r\n\r\n    private String getOperationType(JSONObject operation) {\r\n        if (operation.has(\"parameters\")) {\r\n            JSONArray parameters = operation.getJSONArray(\"parameters\");\r\n            for (int i = 0; i < parameters.length(); i++) {\r\n                if (parameters.getJSONObject(i).has(\"direction\")) {\r\n                    String type;\r\n                    try {\r\n                        type = parameters.getJSONObject(i).getString(\"type\");\r\n                    } catch (JSONException e) {\r\n                        String reference = parameters.getJSONObject(i).getJSONObject(\"type\").getString(\"$ref\");\r\n                        type = JSONDB.DATABASE.getById(reference).getString(\"name\");\r\n                    }\r\n\r\n                    parameters.remove(i);\r\n                    return type;\r\n                }\r\n            }\r\n        }\r\n        return \"void\";\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/fr/umlads/uml2java/db/Translator.java b/src/main/java/fr/umlads/uml2java/db/Translator.java
--- a/src/main/java/fr/umlads/uml2java/db/Translator.java	(revision 5e32a0b84c1ae71064d31fdd62a2a4a5e019298e)
+++ b/src/main/java/fr/umlads/uml2java/db/Translator.java	(date 1648812256589)
@@ -21,7 +21,7 @@
     }
 
     public void translate() throws IOException {
-        JSONArray classes = JSONDB.DATABASE.fetchClasses();
+        JSONArray classes = JSONDB.getInstance().fetchClasses();
 
         preProcess(classes);
 
@@ -212,7 +212,7 @@
             try {
                 result += parameter.getString("type");
             } catch (JSONException e) {
-                result += JSONDB.DATABASE.getById(parameter.getJSONObject("type").getString("$ref")).getString("name");
+                result += JSONDB.getInstance().getById(parameter.getJSONObject("type").getString("$ref")).getString("name");
             }
             result += " " + parameter.getString("name") + ", ";
         }
@@ -307,7 +307,7 @@
                         type = parameters.getJSONObject(i).getString("type");
                     } catch (JSONException e) {
                         String reference = parameters.getJSONObject(i).getJSONObject("type").getString("$ref");
-                        type = JSONDB.DATABASE.getById(reference).getString("name");
+                        type = JSONDB.getInstance().getById(reference).getString("name");
                     }
 
                     parameters.remove(i);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"3471d36a-c94c-41a7-92c5-e6fc794bfdb0\" name=\"Changes\" comment=\"readme\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"7cdfaa37324a2f19e07b4ede4ab31eea10f4da90\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"WARN_ABOUT_DETACHED_HEAD\" value=\"false\" />\r\n  </component>\r\n  <component name=\"GitSEFilterConfiguration\">\r\n    <file-type-list>\r\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\r\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\r\n      <filtered-out-file-type name=\"TAG\" />\r\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\r\n    </file-type-list>\r\n  </component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/README.md\" root0=\"FORCE_HIGHLIGHTING\" root1=\"SKIP_INSPECTION\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"useMavenConfig\" value=\"true\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"24BHUmyKzk7rLis9FcbBhwRnBVY\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"WebServerToolWindowFactoryState\" value=\"false\" />\r\n    <property name=\"com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File\" value=\"JAVA\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/src/main/java\" />\r\n    <property name=\"nodejs_package_manager_path\" value=\"npm\" />\r\n    <property name=\"project.structure.last.edited\" value=\"SDKs\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.0\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.0\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.pluginManager\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\marti\\IdeaProjects\\UML2JAVA\\src\\main\\java\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\marti\\IdeaProjects\\UML2JAVA\\UMLTestFiles\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"fr.umlads\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunAnythingCache\">\r\n    <option name=\"myCommands\">\r\n      <command value=\"mvn clean\" />\r\n      <command value=\"mvn install:help\" />\r\n      <command value=\"mvn package\" />\r\n      <command value=\"mvn clean install\" />\r\n      <command value=\"mvn clean compile assembly:single\" />\r\n    </option>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.Main\">\r\n    <configuration name=\"Benchmark\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"fr.umlads.uml2java.Benchmark\" />\r\n      <module name=\"UML2JAVA\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"fr.umlads.uml2java.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"fr.umlads.uml2java.Main\" />\r\n      <module name=\"UML2JAVA\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"UMLTestFiles/diagram_store.mdj . -sg\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.Benchmark\" />\r\n      <item itemvalue=\"Application.Main\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.Main\" />\r\n        <item itemvalue=\"Application.Benchmark\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"3471d36a-c94c-41a7-92c5-e6fc794bfdb0\" name=\"Changes\" comment=\"\" />\r\n      <created>1643097082523</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1643097082523</updated>\r\n      <workItem from=\"1643097084458\" duration=\"457000\" />\r\n      <workItem from=\"1643097577340\" duration=\"8935000\" />\r\n      <workItem from=\"1643202191006\" duration=\"2374000\" />\r\n      <workItem from=\"1643204591586\" duration=\"5972000\" />\r\n      <workItem from=\"1643616816916\" duration=\"5047000\" />\r\n      <workItem from=\"1644219930230\" duration=\"6746000\" />\r\n      <workItem from=\"1644415957922\" duration=\"962000\" />\r\n      <workItem from=\"1644496284920\" duration=\"9760000\" />\r\n      <workItem from=\"1645536848954\" duration=\"6429000\" />\r\n      <workItem from=\"1646230111665\" duration=\"5811000\" />\r\n      <workItem from=\"1646238540219\" duration=\"1290000\" />\r\n      <workItem from=\"1648221506950\" duration=\"5560000\" />\r\n      <workItem from=\"1648553629645\" duration=\"29000\" />\r\n      <workItem from=\"1648553694002\" duration=\"9375000\" />\r\n      <workItem from=\"1648635397638\" duration=\"5275000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"added gitignore\">\r\n      <created>1643097254882</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1643097254882</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"rollback\">\r\n      <created>1643097478836</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1643097478836</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"translates from json to jave&#10;need to implement certain keywords :&#10;- static&#10;- final&#10;- etc\">\r\n      <created>1643106424327</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1643106424327</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"multiplicities &gt; 1 converted to java arrays and made an executable (god bless)\">\r\n      <created>1644230949619</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644230949619</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"changed way of interpreting associations\">\r\n      <created>1644505761584</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644505761584</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"refactoring\">\r\n      <created>1644505775901</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644505775901</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"now preprocessing certain data before processing it&#10;for now only preprocessing template parameters for generics\">\r\n      <created>1644505860012</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644505860012</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"modified test files\">\r\n      <created>1644505872583</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644505872583</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"added test file\">\r\n      <created>1644505880946</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644505880946</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"minor change\">\r\n      <created>1644505902883</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1644505902883</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"now translates associative classes\">\r\n      <created>1645542286549</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645542286549</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"option to change array types\">\r\n      <created>1645543699295</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1645543699295</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"hot fixes\">\r\n      <created>1648226955790</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648226955790</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"refactor and fixes\">\r\n      <created>1648563696117</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648563696117</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"more test files\">\r\n      <created>1648563713241</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648563713241</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"merged projects\">\r\n      <created>1648566925205</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648566925205</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"readme\">\r\n      <created>1648637182287</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648637182287</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"readme updated\">\r\n      <created>1648639135525</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648639135525</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"fix\">\r\n      <created>1648639157855</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648639157855</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"readme\">\r\n      <created>1648639380472</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648639380472</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"readme\">\r\n      <created>1648639886011</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648639886011</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"readme\">\r\n      <created>1648640153835</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648640153835</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"readme\">\r\n      <created>1648640263015</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1648640263015</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"24\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"temporary-branch\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"added gitignore\" />\r\n    <MESSAGE value=\"rollback\" />\r\n    <MESSAGE value=\"translates from json to jave&#10;need to implement certain keywords :&#10;- static&#10;- final&#10;- etc\" />\r\n    <MESSAGE value=\"multiplicities &gt; 1 converted to java arrays and made an executable (god bless)\" />\r\n    <MESSAGE value=\"changed way of interpreting associations\" />\r\n    <MESSAGE value=\"refactoring\" />\r\n    <MESSAGE value=\"now preprocessing certain data before processing it&#10;for now only preprocessing template parameters for generics\" />\r\n    <MESSAGE value=\"modified test files\" />\r\n    <MESSAGE value=\"added test file\" />\r\n    <MESSAGE value=\"minor change\" />\r\n    <MESSAGE value=\"now translates associative classes\" />\r\n    <MESSAGE value=\"option to change array types\" />\r\n    <MESSAGE value=\"benchmarking and fixed issues\" />\r\n    <MESSAGE value=\"hot fixes\" />\r\n    <MESSAGE value=\"refactor and fixes\" />\r\n    <MESSAGE value=\"more test files\" />\r\n    <MESSAGE value=\"merged projects\" />\r\n    <MESSAGE value=\"readme updated\" />\r\n    <MESSAGE value=\"fix\" />\r\n    <MESSAGE value=\"readme\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"readme\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <watches-manager>\r\n      <configuration name=\"Application\">\r\n        <watch expression=\"classes\" />\r\n      </configuration>\r\n    </watches-manager>\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 5e32a0b84c1ae71064d31fdd62a2a4a5e019298e)
+++ b/.idea/workspace.xml	(date 1648826311659)
@@ -4,7 +4,13 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="3471d36a-c94c-41a7-92c5-e6fc794bfdb0" name="Changes" comment="readme" />
+    <list default="true" id="3471d36a-c94c-41a7-92c5-e6fc794bfdb0" name="Changes" comment="readme">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/fr/umlads/Main.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/umlads/Main.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/fr/umlads/uml2java/db/JSONDB.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/umlads/uml2java/db/JSONDB.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/fr/umlads/uml2java/db/Linker.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/umlads/uml2java/db/Linker.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/fr/umlads/uml2java/db/Translator.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/fr/umlads/uml2java/db/Translator.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -101,9 +107,9 @@
       </method>
     </configuration>
     <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="fr.umlads.uml2java.Main" />
+      <option name="MAIN_CLASS_NAME" value="fr.umlads.Main" />
       <module name="UML2JAVA" />
-      <option name="PROGRAM_PARAMETERS" value="UMLTestFiles/diagram_store.mdj . -sg" />
+      <option name="PROGRAM_PARAMETERS" value="uml2java UMLTestFiles/diagram_store.mdj . -sg" />
       <method v="2">
         <option name="Make" enabled="true" />
       </method>
@@ -141,7 +147,8 @@
       <workItem from="1648221506950" duration="5560000" />
       <workItem from="1648553629645" duration="29000" />
       <workItem from="1648553694002" duration="9375000" />
-      <workItem from="1648635397638" duration="5275000" />
+      <workItem from="1648635397638" duration="6396000" />
+      <workItem from="1648809879538" duration="4020000" />
     </task>
     <task id="LOCAL-00001" summary="added gitignore">
       <created>1643097254882</created>
@@ -304,7 +311,28 @@
       <option name="project" value="LOCAL" />
       <updated>1648640263015</updated>
     </task>
-    <option name="localTasksCounter" value="24" />
+    <task id="LOCAL-00024" summary="readme">
+      <created>1648640822885</created>
+      <option name="number" value="00024" />
+      <option name="presentableId" value="LOCAL-00024" />
+      <option name="project" value="LOCAL" />
+      <updated>1648640822885</updated>
+    </task>
+    <task id="LOCAL-00025" summary="readme">
+      <created>1648640884269</created>
+      <option name="number" value="00025" />
+      <option name="presentableId" value="LOCAL-00025" />
+      <option name="project" value="LOCAL" />
+      <updated>1648640884269</updated>
+    </task>
+    <task id="LOCAL-00026" summary="readme">
+      <created>1648640928670</created>
+      <option name="number" value="00026" />
+      <option name="presentableId" value="LOCAL-00026" />
+      <option name="project" value="LOCAL" />
+      <updated>1648640928670</updated>
+    </task>
+    <option name="localTasksCounter" value="27" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
Index: src/main/java/fr/umlads/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package fr.umlads;\r\n\r\nimport fr.java2uml.ArgumentException;\r\nimport fr.java2uml.JavaAnalyser;\r\nimport fr.umlads.uml2java.db.UML2Java;\r\n\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport java.util.Arrays;\r\n\r\npublic class Main {\r\n    public static void main(String[] args) throws ArgumentException, IOException {\r\n        if (args.length < 2) {\r\n            System.out.println(\"Usage : \" + \"umlads <uml2java|java2uml> <source> <target> [options]\");\r\n            System.exit(1);\r\n        }\r\n\r\n        String direction = args[0];\r\n        String source = args[1];\r\n        String target = args[2];\r\n\r\n        if (!Files.exists(Paths.get(source))) {\r\n            System.out.println(\"Source file does not exist\");\r\n            System.exit(1);\r\n        } else if (!Files.exists(Paths.get(target))) {\r\n            System.out.println(\"Target directory does not exist\");\r\n            System.exit(1);\r\n        }\r\n\r\n        if (direction.equals(\"uml2java\")) {\r\n            boolean generateGettersAndSetters = false;\r\n\r\n            if (Arrays.asList(args).contains(\"-sg\")) {\r\n                generateGettersAndSetters = true;\r\n            }\r\n            try {\r\n                UML2Java translator = new UML2Java(source, target, generateGettersAndSetters);\r\n                translator.generate();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        } else if (direction.equals(\"java2uml\")) {\r\n            checkArgs(args);\r\n            JavaAnalyser analyser = new JavaAnalyser(source, target);\r\n        } else {\r\n            System.out.println(\"Unknown direction\");\r\n            System.exit(1);\r\n        }\r\n    }\r\n\r\n    public static void checkArgs(String[] args) throws ArgumentException {\r\n        switch (args.length) {\r\n            case 0, 1 ->\r\n                    throw new ArgumentException(\"Renseignez le dossier contenant les fichiers java en premier argument et le dossier de sortie en second argument.\");\r\n            case 2 -> {}\r\n            default ->\r\n                    throw new ArgumentException(\"Trop d'arguments\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/fr/umlads/Main.java b/src/main/java/fr/umlads/Main.java
--- a/src/main/java/fr/umlads/Main.java	(revision 5e32a0b84c1ae71064d31fdd62a2a4a5e019298e)
+++ b/src/main/java/fr/umlads/Main.java	(date 1648812640835)
@@ -23,7 +23,7 @@
         if (!Files.exists(Paths.get(source))) {
             System.out.println("Source file does not exist");
             System.exit(1);
-        } else if (!Files.exists(Paths.get(target))) {
+        } else if (!Files.exists(Paths.get(target)) && !target.equals(".")) {
             System.out.println("Target directory does not exist");
             System.exit(1);
         }
